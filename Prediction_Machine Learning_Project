---
title: "Prediction"
author: "Prasad P"
date: "15 November 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Background
#Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://web.archive.org/web/20161224072740/http:/groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).

## Data
#Training and Test files are provided
#Training file has the classe column which will be used for rediction.
#Test file will be used for final evaluation

```{r Readfiles, echo=TRUE}
library(AppliedPredictiveModeling)
library(caret)
# Read the file
trainfile <- read.csv("C:/Users/prasad.pande/Documents/pml-training.csv", header = TRUE)
Valfile <- read.csv("C:/Users/prasad.pande/Documents/pml-testing.csv", header = TRUE)


# Create partition with 70% of the rows in training and other 30% for training
inTrain <- createDataPartition(trainfile$classe, p=0.70, list = FALSE)
set.seed(301)

trainingset <- trainfile[inTrain,]
testingset <- trainfile[-inTrain,]
dim(trainingset)

# Cleaning the data by removing the values with are near zero and NA. Also removing first 5 since they are time serise
trainingset <- trainingset[, -nearZeroVar(trainingset)]
testingset <- testingset[, -nearZeroVar(testingset)]
dim(trainingset)

chkNA <- sapply(trainingset, function(x) mean(is.na(x)))>0.95
trainingset <- trainingset[, chkNA==FALSE]
testingset <- testingset[, chkNA==FALSE]
dim(trainingset)

trainingset <- trainingset[, -(1:5)]
testingset <- testingset[, -(1:5)]

# Using the random forest algorithm
controlRF <- trainControl(method = "cv", number = 3, verboseIter = FALSE, allowParallel = TRUE)
modfit0 <- train(classe ~ . , data = trainingset, method = "gbm", trControl = controlRF)



pred_gbm <- predict(modfit0, testingset)

result_gbm <- confusionMatrix(pred_gbm, testingset$classe)

# Using the random forest algorithm
controlRF <- trainControl(method = "cv", number = 3, verboseIter = FALSE, allowParallel = TRUE)
modfit <- train(classe ~ . , data = trainingset, method = "rf",trControl = controlRF)

pred_rf <- predict(modfit, testingset)

result_rf <- confusionMatrix(pred_rf, testingset$classe)


# Using the ctree algorithm
controlRF <- trainControl(method = "cv", number = 3, verboseIter = FALSE, allowParallel = TRUE)
modfit1 <- train(classe ~ . , data = trainingset, method = "ctree",trControl = controlRF)

pred_ctree <- predict(modfit1, testingset)

result_ctree <- confusionMatrix(pred_ctree, testingset$classe)

# Based on the accuracy of the confusionmatrix Random forest algorithm is best and hence the prediction of the validation file done using modfit

predict_validate <- predict(modfit, newdata = Valfile)

# Result of the Random forest is provided below
predict_validate

```

## Including Plots, best model is random forest and the plot is included

```{r best model, echo=FALSE}
par(mfrow=c(1,3))
plot(modfit0)
plot(modfit)
plot(modfit1)
```
